# -*- python -*-
# ex: set syntax=python:

from buildbot.plugins import *

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
c['slaves'] = []
<%- node['dmlb2000_pipeline']['all_slaves'].each do |slave,password| %>
c['slaves'].append(buildslave.BuildSlave("<%= slave %>", "<%= password['password'] %>"))
<%- end %>

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': <%= node['dmlb2000_pipeline']['protocols']['port'] %>}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

c['change_source'] = []
<%- node['dmlb2000_pipeline']['cookbooks'].each do |cookbook| %>
c['change_source'].append(changes.GitPoller(
        "https://github.com/dmlb2000/<%= cookbook %>.git",
        workdir='gitpoller-workdir-<%= cookbook %>', branch='master',
        project='<%= cookbook %>',
        pollinterval=60))
<%- end %>

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = [schedulers.Triggerable(name='kitchen', builderNames=['kitchen'])]
builderNames = []
builderNames += <%= node['dmlb2000_pipeline']['cookbooks'].collect{|x| x+"_quick"}.to_s %>
<%- node['dmlb2000_pipeline']['cookbooks'].each do |cookbook|%>
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name='<%= cookbook %>',
                            change_filter=util.ChangeFilter(project='<%= cookbook %>'),
                            treeStableTimer=None,
                            builderNames=['<%= cookbook %>_quick']))
<%- end %>
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=builderNames))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

c['builders'] = []
factory = util.BuildFactory()
factory.addStep(steps.ShellCommand(command=["/bin/bash", "-xe", "/var/lib/buildbot/kitchen_run.sh"], env={"FROM_COOKBOOK": util.Interpolate('%(prop:from_cookbook)s'), "REVISION": util.Interpolate('%(prop:got_revision:-%(src::revision:-unknown)s)s')}))
c['builders'].append(
    util.BuilderConfig(name="kitchen",
      slavenames=["kitchen"],
      factory=factory))

<%- node['dmlb2000_pipeline']['cookbooks'].each do |cookbook| %>
factory = util.BuildFactory()

factory.addStep(steps.Git(repourl="https://github.com/dmlb2000/<%=cookbook %>.git", mode='incremental'))
factory.addStep(steps.ShellCommand(command=["rubocop", "."]))
factory.addStep(steps.ShellCommand(command=["foodcritic", ".", "-f", "correctness"]))
factory.addStep(steps.Trigger(schedulerNames=['kitchen'],waitForFinish=True, set_properties={"from_cookbook": "<%= cookbook %>"}))

c['builders'].append(
    util.BuilderConfig(name="<%= cookbook %>_quick",
      slavenames=["quick"],
      factory=factory))
<%- end %>


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("guest","password")]),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = 'auth',  # ..or this
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=<%= node['dmlb2000_pipeline']['port'] %>, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "dmlb2000 Chef"
c['titleURL'] = "https://www.dmlb2000.org"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "<%= node['dmlb2000_pipeline']['url'] %>"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
